[{"/Users/naokihino/Desktop/project/quizapp/src/index.tsx":"1","/Users/naokihino/Desktop/project/quizapp/src/reportWebVitals.ts":"2","/Users/naokihino/Desktop/project/quizapp/src/App.tsx":"3"},{"size":500,"mtime":1609405439093,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1609405439096,"results":"6","hashOfConfig":"5"},{"size":4734,"mtime":1609405439092,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"8spfn2",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/naokihino/Desktop/project/quizapp/src/index.tsx",[],["16","17"],"/Users/naokihino/Desktop/project/quizapp/src/reportWebVitals.ts",[],"/Users/naokihino/Desktop/project/quizapp/src/App.tsx",["18","19","20","21","22"],"import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { Button } from \"@material-ui/core\";\r\nimport { couldStartTrivia } from \"typescript\";\r\n\r\nconst App = () => {\r\n  const [questionsAnswers, setQuestionsAnswers] = useState([\r\n    {\r\n      questions: \"apple\",\r\n      answers: [\"1リンゴ\", \"2バナナ\", \"3ブドウ\"],\r\n    },\r\n    {\r\n      questions: \"fox\",\r\n      answers: [\"1キツネ\", \"2タヌキ\", \"3クマ\"],\r\n    },\r\n    {\r\n      questions: \"guitar\",\r\n      answers: [\"1ギター\", \"2ベース\", \"3ドラム\"],\r\n    },\r\n    {\r\n      questions: \"red\",\r\n      answers: [\"1赤\", \"2青\", \"3緑\"],\r\n    },\r\n    {\r\n      questions: \"car\",\r\n      answers: [\"1車\", \"2電車\", \"3飛行機\"],\r\n    },\r\n    {\r\n      questions: \"buy\",\r\n      answers: [\"1買う\", \"2売る\", \"3交換する\"],\r\n    },\r\n    {\r\n      questions: \"have\",\r\n      answers: [\"1持っている\", \"2住んでいる\", \"3立っている\"],\r\n    },\r\n    {\r\n      questions: \"snow\",\r\n      answers: [\"1雪\", \"2雷\", \"3雨\"],\r\n    },\r\n    {\r\n      questions: \"fly\",\r\n      answers: [\"1飛ぶ\", \"2潜る\", \"3寝る\"],\r\n    },\r\n    {\r\n      questions: \"run\",\r\n      answers: [\"1走る\", \"2歩く\", \"3移動する\"],\r\n    },\r\n  ]);\r\n\r\n  const [getQuestionsAnswers, setGetQuestionsAnswers] = useState({\r\n    // そもそもこれはstateで管理する必要があるのか？\r\n    questions: \"初期値\",\r\n    answers: [\"1初期値\", \"2初期値\", \"3初期値\"],\r\n  });\r\n\r\n  const [score, setScore] = useState(0);\r\n  const [questionNumber, setQuestionNumber] = useState(1);\r\n\r\n  const questionsLength = questionsAnswers.length; // 問題文+回答のオブジェクトを要素とした配列の長さ（2）\r\n  const random = Math.random() * Math.floor(getQuestionsAnswers.answers.length);\r\n  const questions = getQuestionsAnswers.questions;\r\n  const answers = getQuestionsAnswers.answers;\r\n\r\n  // 最大値までのランダムな整数を返す関数\r\n  const getRandomInt = (max: number) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  };\r\n\r\n  const changeQuestions = () => {\r\n    //　様々な問題+回答が入った配列をシャッフルする処理\r\n    for (let i = questionsAnswers.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const tmp = questionsAnswers[i];\r\n      questionsAnswers[i] = questionsAnswers[j];\r\n      questionsAnswers[j] = tmp;\r\n    }\r\n    // stateに問題+回答を格納\r\n    setGetQuestionsAnswers(questionsAnswers.shift()!); // !つけたらエラー消えた（nonnullアサーション）\r\n    console.log(answers) // <= なんで？？？？？新しい問題と回答が入ってるはずでは？？？？？\r\n    // 3つの回答をシャッフル\r\n    // for (let i = answers.length - 1; i > 0; i--) {\r\n    //   const j = Math.floor(Math.random() * (i + 1));\r\n    //   const tmp = answers[i];\r\n    //   answers[i] = answers[j];\r\n    //   answers[j] = tmp;\r\n    // }\r\n    // シャッフルした回答をstateにセット\r\n    // setGetQuestionsAnswers(getQuestionsAnswers);\r\n  };\r\n\r\n  // console.log(answers);\r\n  const correct = () => {\r\n    // alert(\"正解！\");\r\n    setScore(score + 1);\r\n    setQuestionNumber(questionNumber + 1);\r\n    changeQuestions();\r\n    // console.log(getQuestionsAnswers)\r\n  };\r\n\r\n  const wrong = () => {\r\n    alert(\"残念！\");\r\n    setQuestionNumber(questionNumber + 1);\r\n    changeQuestions();\r\n  };\r\n\r\n  if (questionNumber === 11) {\r\n    alert(`終了！ ${score * 10}点！`);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>{questions}</h1>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\"buttonSize\"\r\n        onClick={correct}\r\n      >\r\n        {/* {getQuestionsAnswers.answers.shift()とか{getQuestionsAnswers.answers.splice()とかで、ランダムにとろうとしたけどダメだった、changeした後に何も表示されなくなる、spliceの戻り値がから配列だからかも、要確認、なぜshiftもダメ？（配列が空になったのがなぜか引き継がれてる、問題文は表示されてるからレンダリングは問題なくできてるはずだけどなあ） */}\r\n        {answers[0]}\r\n        {/* {console.log(getQuestionsAnswers)} */}\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\"buttonSize\"\r\n        onClick={wrong}\r\n      >\r\n        {answers[1]}\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\"buttonSize\"\r\n        onClick={wrong}\r\n      >\r\n        {answers[2]}\r\n      </Button>\r\n      <h2>{`${questionNumber}問目　正解数: ${score}`}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":5,"column":10,"nodeType":"29","messageId":"30","endLine":5,"endColumn":26},{"ruleId":"27","severity":1,"message":"31","line":8,"column":28,"nodeType":"29","messageId":"30","endLine":8,"endColumn":47},{"ruleId":"27","severity":1,"message":"32","line":60,"column":9,"nodeType":"29","messageId":"30","endLine":60,"endColumn":24},{"ruleId":"27","severity":1,"message":"33","line":61,"column":9,"nodeType":"29","messageId":"30","endLine":61,"endColumn":15},{"ruleId":"27","severity":1,"message":"34","line":66,"column":9,"nodeType":"29","messageId":"30","endLine":66,"endColumn":21},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"@typescript-eslint/no-unused-vars","'couldStartTrivia' is defined but never used.","Identifier","unusedVar","'setQuestionsAnswers' is assigned a value but never used.","'questionsLength' is assigned a value but never used.","'random' is assigned a value but never used.","'getRandomInt' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]